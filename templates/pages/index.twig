{% extends "layout.twig" %}

{% block content %}
    <div class="hero-unit">
        <h1>Drupal 8 Release</h1>
        <section class="estimate">
            <h2 class="value">
                ?
            </h2>
            <div class="note"></div>
        </section>

        {#
        <section class="changes">
            <h4>Issue Changes</h4>
            <table>
                <thead>
                    <tr>
                        <th></th>
                        <th>Critical</th>
                        <th>Major</th>
                        <th>Normal</th>
                    </tr>
                </thead>
                <tbody>
                    <tr data-current>
                        <th>Current</th>
                        <td data-key='critical'>?</td>
                        <td data-key='major'>?</td>
                        <td data-key='normal'>?</td>
                    </tr>
                    <tr data-period='day'>
                        <th>Day</th>
                        <td data-key='critical'>?</td>
                        <td data-key='major'>?</td>
                        <td data-key='normal'>?</td>
                    </tr>
                    <tr data-period='week'>
                        <th>Week</th>
                        <td data-key='critical'>?</td>
                        <td data-key='major'>?</td>
                        <td data-key='normal'>?</td>
                    </tr>
                    <tr data-period='month'>
                        <th>Month</th>
                        <td data-key='critical'>?</td>
                        <td data-key='major'>?</td>
                        <td data-key='normal'>?</td>
                    </tr>
                    <tr data-period='quarter'>
                        <th>3 Month</th>
                        <td data-key='critical'>?</td>
                        <td data-key='major'>?</td>
                        <td data-key='normal'>?</td>
                    </tr>
                    <tr data-period='half'>
                        <th>6 Month</th>
                        <td data-key='critical'>?</td>
                        <td data-key='major'>?</td>
                        <td data-key='normal'>?</td>
                    </tr>
                    <tr data-period='year'>
                        <th>Year</th>
                        <td data-key='critical'>?</td>
                        <td data-key='major'>?</td>
                        <td data-key='normal'>?</td>
                    </tr>
                </tbody>
            </table>
        </section>
        #}
    </div>
{% endblock %}

{% block footerInlineScripts %}
    {{ parent() }}

    <script type="text/javascript">
        function dateToString(date) {
            var string;

            if (window.Intl && typeof window.Intl === "object") {
                string =  date.toLocaleDateString(
                    'en-US',
                    {
                        month: 'long',
                        day: 'numeric',
                        year: 'numeric'
                    }
                );
            }
            else {
                var months = {
                    0 : 'January',
                    1 : 'February',
                    2 : 'March',
                    3 : 'April',
                    4 : 'May',
                    5 : 'June',
                    6 : 'July',
                    7 : 'August',
                    8 : 'September',
                    9 : 'October',
                    10 : 'November',
                    11 : 'December'
                };
                string = months[date.getMonth()] + ' ' + date.getDate() + ', ' + date.getFullYear();
            }

            return string;
        }

        $(function () {
            function updateRelease(release) {
                var release = release || {
                    value: 'N/A',
                    note: 'The latest release could not be retrieved'
                };
                $('.estimate .value').html(release.value);
                $('.estimate .note').html(release.note);
            }
            Timing.start('index.loadReleases');
            $.getJSON('https://www.drupal.org/api-d7/node.json?type=project_release&field_release_project=3060&field_release_version_major=8&field_release_version_minor=0&field_release_build_type=static')
                .done(function (response) {
                    Timing.stop('index.loadReleases');

                    var release;
                    if (response.list) {
                        response.list.sort(function (a, b) {
                            return a.created - b.created;
                        });
                        var latestRelease = response.list.pop();

                        release = {
                            value: '<a href="https://www.drupal.org/node/' + latestRelease.nid + '">' + latestRelease.field_release_version + '</a>',
                            note: 'as of ' + dateToString(new Date(latestRelease.created * 1000))
                        };
                    }
                    updateRelease(release);

                    if (typeof GoogleAnalyticsObject !== 'undefined') {
                        window[GoogleAnalyticsObject]('send', 'timing', 'data', 'load', Timing.get('index.loadReleases'), 'releases');
                    }
                })
                .fail(function () {
                    updateRelease();
                });

            var historicalSamplesMapping = {
                'critical': function (data) {
                    // Bugs and tasks must exist and have a value
                    if (
                        typeof data.critical_bugs === 'undefined' ||
                        data.critical_bugs === null ||
                        typeof data.critical_tasks === 'undefined' ||
                        data.critical_tasks === null
                    ) {
                        return null;
                    }
                    var value = data.critical_bugs + data.critical_tasks;

                    // Plans might not exist, but must have a value if present
                    if (typeof data.critical_plans !== 'undefined') {
                        if (typeof data.critical_plans === null) {
                            return null;
                        }
                        value += data.critical_plans;
                    }

                    return value;
                },
                'major': function (data) {
                    // Bugs and tasks must exist and have a value
                    if (
                        typeof data.major_bugs === 'undefined' ||
                        data.major_bugs === null ||
                        typeof data.major_tasks === 'undefined' ||
                        data.major_tasks === null
                    ) {
                        return null;
                    }
                    var value = data.major_bugs + data.major_tasks;

                    // Plans might not exist, but must have a value if present
                    if (typeof data.major_plans !== 'undefined') {
                        if (typeof data.major_plans === null) {
                            return null;
                        }
                        value += data.major_plans;
                    }

                    return value;
                },
                'normal': function (data) {
                    // Bugs and tasks must exist and have a value
                    if (
                        typeof data.normal_bugs === 'undefined' ||
                        data.normal_bugs === null ||
                        typeof data.normal_tasks === 'undefined' ||
                        data.normal_tasks === null
                    ) {
                        return null;
                    }
                    var value = data.normal_bugs + data.normal_tasks;

                    // Plans might not exist, but must have a value if present
                    if (typeof data.normal_plans !== 'undefined') {
                        if (typeof data.normal_plans === null) {
                            return null;
                        }
                        value += data.normal_plans;
                    }

                    return value;
                }
            };
            /*
            Timing.start('index.loadHistoricalSamples');
            $.getJSON('/data/historical-samples.json').done(function (response) {
                Timing.stop('index.loadHistoricalSamples');

                $('.changes [data-current] td[data-key]').each(function () {
                    var key = $(this).data('key');
                    var value = historicalSamplesMapping[key](response.data.current)
                    if (value !== null) {
                        $(this).html(value);
                    }
                });

                $('.changes [data-period]').each(function () {
                    var period = $(this).data('period');

                    if (typeof response.data[period] === 'undefined') {
                        return;
                    }

                    $(this).find('td[data-key]').each(function () {
                        var key = $(this).data('key');
                        var currentValue = historicalSamplesMapping[key](response.data.current);
                        var pastValue = historicalSamplesMapping[key](response.data[period]);

                        if (currentValue !== null && pastValue !== null) {
                            var delta = currentValue - pastValue;
                            var deltaPercent = (delta / pastValue * 100).toPrecision(2);

                            if (delta > 0) {
                                delta = '+' + delta;
                                deltaPercent = '+' + deltaPercent;
                                $(this).addClass('up');
                            }
                            else if (delta < 0) {
                                // Convert negative symbol to a 'minus' character so that it is read by screen readers in digit mode.
                                delta = '−' + delta.toString().slice(1);
                                $(this).addClass('down');
                            }

                            $(this)
                                .html(delta)
                                .attr('title', deltaPercent + '%');
                        }

                    });
                });

                if (typeof GoogleAnalyticsObject !== 'undefined') {
                    window[GoogleAnalyticsObject]('send', 'timing', 'data', 'load', Timing.get('index.loadHistoricalSamples'), 'historical-samples');
                }
            });
            */
        });
    </script>
{% endblock %}
