{% extends "charts/layout.twig" %}

{% block title %}{{ parent() }} - Estimates Chart{% endblock %}

{% block content %}
    <div id="chart-wrapper">
        <div id="chart"></div>
        <div id="chart-control"></div>
        <div class="chart-caption">
            <a id='chart-refresh' href='#' class="disabled">Refresh</a> |
            <a id='chart-data' href="/data/estimates.json">JSON</a>
        </div>
    </div>
{% endblock %}

{% block footerInlineScripts %}
    {{ parent() }}
    <script type="text/javascript">

        $(function () {
                var dashboard,
                    chartWrapper,
                    chartData,
                    controlWrapper;

            google.setOnLoadCallback(initializeChart);

            var resizeTimeout = null;
            var resizeFunction = function () {
                Timing.start('chart.redraw');
                drawChart();
                Timing.stop('chart.redraw');

                if (typeof GoogleAnalyticsObject !== 'undefined') {
                    window[GoogleAnalyticsObject]('send', 'timing', 'chart', 'redraw', Timing.get('chart.redraw'), 'estimates');
                }
            };
            $(window).resize(function () {
                clearTimeout(resizeTimeout);
                resizeTimeout = setTimeout(resizeFunction, 100);
            });

            $('#chart-refresh').click(function (event) {
                event.preventDefault();

                var $link = $(this);

                if ($link.hasClass('disabled')) {
                    return;
                }

                $link.addClass('disabled');
                $('#chart').fadeTo('fast', 0.2, loadChart);
            });

            function initializeChart() {

                dashboard = new google.visualization.Dashboard($('#chart-wrapper').get(0));

                var controlStart = new Date();
                controlStart.setFullYear(controlStart.getFullYear()-1);
                var controlEnd = new Date();
                controlEnd.setFullYear(controlEnd.getFullYear()+1);

                controlWrapper = new google.visualization.ControlWrapper({
                    controlType: 'ChartRangeFilter',
                    containerId: 'chart-control',
                    options: {
                        filterColumnIndex: 0,
                        ui: {
                            chartType: 'LineChart',
                            chartOptions: {
                                chartArea: {
                                    width: '75%',
                                    height: '100%'
                                },
                                lineWidth: 0,
                                pointSize: 1
                            },
                            'chartView': {
                                'columns': [0, 1]
                            },
                            // 1 week in milliseconds = 7 * 24 * 60 * 60 * 1000 = 604,800,000
                            minRangeSize: 604800000
                        }
                    },
                    state: {
                        range: {
                            start: controlStart,
                            end: controlEnd
                        }
                    }
                });

                chartWrapper = new google.visualization.ChartWrapper({
                    chartType: 'LineChart',
                    containerId: 'chart',
                    options: {
                        title: 'Estimate',
                        chartArea: {
                            width: '75%',
                            height: '90%',
                            top: '6%'
                        },
                        legend: 'none',
                        lineWidth: 0,
                        pointSize: 6,
                        intervals: {
                            'style':'boxes',
                            'lineWidth': 0,
                            'boxWidth': 0.15,
                            fillOpacity: 0.075
                        }
                    }
                });

                dashboard.bind(controlWrapper, chartWrapper);

                if (Date.prototype.toISOString) {
                    google.visualization.events.addListener(chartWrapper, 'select', function() {
                        var selected = chartWrapper.getChart().getSelection();
                        if (selected.length && selected[0].row) {
                            var selectedDate = chartWrapper.getDataTable().getValue(selected[0].row, 0);
                            window.location = '/chart/distribution#date=' + encodeURIComponent(selectedDate.toISOString());
                        }
                    });
                }

                loadChart();
            }

            function loadChart() {
                Timing.start('chart.loadData');

                $.get('/data/estimates.json', function (response, textStatus, jqXHR) {
                    Timing.stop('chart.loadData');
                    Timing.start('chart.processData');

                    chartData = new google.visualization.DataTable();

                    chartData.addColumn('datetime', 'Time');
                    chartData.addColumn('datetime', 'Estimates');
                    chartData.addColumn({type:'datetime', role:'interval'});
                    chartData.addColumn({type:'datetime', role:'interval'});

                    var data = response.data;

                    for (var i in data) {

                        if (data[i].estimate !== null && data[i].estimate !== '0000-00-00') {

                            var when = new Date(data[i].when);
                            var timezoneOffsetHours = (when.getTimezoneOffset() / -60).toString().replace(/^(-?)(\d)$/, '$10$2');
                            var timezoneOffsetMins = (when.getTimezoneOffset() % 60).toString().replace(/^(\d)$/, '0$1');
                            var timezoneOffsetString = (when.getTimezoneOffset() > 0?'':'+' ) + timezoneOffsetHours + ":" + timezoneOffsetMins;;
                            var estimateDateString = data[i].estimate.replace(/^(\d{4}-\d{2}-\d{2})$/, '$1T00:00:00' + timezoneOffsetString);
                            var estimateDate = new Date(estimateDateString);

                            chartData.addRow([
                                when,
                                {
                                    v: estimateDate,
                                    f: estimateDate.toDateString()
                                },
                                data[i].geometricStandardDeviationBounds? {
                                    v: new Date(data[i].geometricStandardDeviationBounds.lower),
                                    f: new Date(data[i].geometricStandardDeviationBounds.lower).toDateString()
                                } : null,
                                data[i].geometricStandardDeviationBounds? {
                                    v: new Date(data[i].geometricStandardDeviationBounds.upper),
                                    f: new Date(data[i].geometricStandardDeviationBounds.upper).toDateString()
                                } : null
                            ]);
                        }
                    }
                    Timing.stop('chart.processData');

                    Timing.start('chart.firstDraw');
                    drawChart();
                    Timing.stop('chart.firstDraw');

                    if (typeof GoogleAnalyticsObject !== 'undefined') {
                        window[GoogleAnalyticsObject]('send', 'timing', 'data', 'load', Timing.get('chart.loadData'), 'estimates');
                        window[GoogleAnalyticsObject]('send', 'timing', 'chart', 'processData', Timing.get('chart.processData'), 'estimates');
                        window[GoogleAnalyticsObject]('send', 'timing', 'chart', 'firstDraw', Timing.get('chart.firstDraw'), 'estimates');
                    }

                    $('#chart-refresh').removeClass('disabled');
                    $('#chart').fadeTo('fast', 1);
                });
            }

            function drawChart() {
                dashboard.draw(chartData);
            }
        });
    </script>
{% endblock %}
